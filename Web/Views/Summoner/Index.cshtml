@using Domain.Enums
@using Web.Views.Manage
@model Domain.Views.SummonerInfoView

@{
    ViewBag.Title = "Summoner Info";
    ViewData.AddActivePage(ManageNavPages.Index);
}

<h2>@ViewData["Title"]</h2>
@await Html.PartialAsync("_StatusMessage", Model.StatusMessage)
@if (Model.IsValid)
{
    <div class="row">
        <div class="col-md-6">
            <p>
                Now that you have updated your Summoner Info, you can now request to play with other players on your
                <a asp-action="Index" asp-controller="Manage">Profile</a>
                page. Or you can go directly to the request form
                <a asp-action="RequestPlayers" asp-controller="Summoner">here</a>.
            </p>
        </div>
    </div>
}
<div class="row">
    <div class="col-md-6">
        <form method="post">
            <div asp-validation-summary="All" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="SummonerName"></label>
                <input asp-for="SummonerName" class="form-control" placeholder="Your name as it appears in client" />
            </div>
            <div class="form-group">
                <label asp-for="Role"></label>
                <select asp-items="Html.GetEnumSelectList<SummonerRoleEnum>()" asp-for="Role" class="form-control"></select>
            </div>
            <div class="form-group">
                <label asp-for="OffRole"></label>
                <select asp-items="Html.GetEnumSelectList<SummonerRoleEnum>()" asp-for="OffRole" class="form-control">
                </select>
            </div>
            <div class="form-group">
                <label asp-for="IsSubOnly">E-Sub only</label>
                <input type="checkbox" asp-for="IsSubOnly" class="form-control" />
            </div>
            <div class="form-group">
                <label asp-for="TierDivision"></label>
                <select asp-items="Html.GetEnumSelectList<TierDivisionEnum>()" asp-for="TierDivision" class="form-control"></select>
            </div>
            <div class="form-group">
                <label asp-for="CurrentLp"></label>
                <input asp-for="CurrentLp" class="form-control" />
            </div>
            <div class="form-group">
                <label asp-for="OpGgUrl"></label>
                <input asp-for="OpGgUrl" class="form-control" placeholder="Please input the full url" />
            </div>
            <div class="form-group">
                <label asp-for="AlternateAccounts">Alternate Accounts (applies if you have any, list in order of highest ranked solo/flex)</label>
                <table>
                    <tr>
                        <th class="col-md-2">AlternateName</th>
                        <th class="col-md-6">OpGgUrlLink</th>
                    </tr>
                    <tbody>
                        @for (var i = 0; i < Model.AlternateAccounts.Count; i++)
                        {
                            <tr>
                                <td class="col-md-2">
                                    <input asp-for="@Model.AlternateAccounts[i].AlternateName" class="form-control" />
                                </td>
                                <td class="col-md-6">
                                    <input asp-for="@Model.AlternateAccounts[i].OpGgUrlLink" class="form-control" />
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <button type="submit" class="btn btn-default">Save</button>
        </form>
    </div>
</div>

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")
}