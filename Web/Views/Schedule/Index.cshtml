@using DAL.Entities.UserData
@using Microsoft.AspNetCore.Identity

@inject SignInManager<UserEntity> SignInManager
@inject UserManager<UserEntity> UserManager
@inject RoleManager<UserRoleEntity> UserRoleManager

@model Dictionary<string, List<Domain.Views.ScheduleView>>
@{
    ViewData["Title"] = "All schedules";
}

<h2>@ViewData["Title"]</h2>

@{
    if (!Model.Any())
    {
        <div class="card center-block">
            <div class="card-body">
                This will be filled after all teams are finalized, please wait until AFTER 5/12/2019
            </div>
        </div>

        if (SignInManager.IsSignedIn(User))
        {
            var user = await UserManager.GetUserAsync(User);
            if (await UserManager.IsInRoleAsync(user, "Admin"))
            {
                <button class="bigRedButton center-block">
                    @Html.ActionLink("Create Schedules", "CreateScheduleAsync")
                </button>
            }
        }

    }
    else
    {
        foreach (var divisionSchedule in Model)
        {
            <div class="row">
                <div class="card center-block">
                    <div class="card-body">
                        @divisionSchedule.Key Team Schedule (Times are based in EST)
                    </div>
                </div>
                <table class="table table-bordered">
                    <tr>
                        <th>HomeTeam</th>
                        <th>AwayTeam</th>
                        <th>HomeTeamScore</th>
                        <th>AwayTeamScore</th>
                        <th>Week Of</th>
                        <th>Start Time</th>
                        <th>Casters</th>
                    </tr>
                    @foreach (var week in divisionSchedule.Value)
                    {
                        <tr>
                            <td>@week.HomeTeam</td>
                            <td>@week.AwayTeam</td>
                            <td>@week.HomeTeamScore</td>
                            <td>@week.AwayTeamScore</td>
                            <td>@Convert.ToDateTime(week.WeekOf.ToString("MM/dd/yyyy"))</td>
                            @{
                                if (week.PlayTime == null)
                                {
                                    <td>TBD</td>
                                }
                                else
                                {
                                    <td>@Convert.ToDateTime(week.PlayTime.Value.ToString("MM/dd/yyyy hh:mm"))</td>
                                }
                            }
                            @{
                                if (string.IsNullOrEmpty(week.CasterName))
                                {
                                    <td>TBD</td>
                                }
                                else
                                {
                                    <td>@week.CasterName</td>
                                }
                            }
                        </tr>
                    }
                </table>
            </div>
        }
    }
}

